from utils import *
import os
import argparse
import vcd

class SiglentParser:
  def __init__(self, fp):
    self.fp = fp

    with open(fp, 'rb') as f:
      self.ExtractHeaderInfo(f)

    self.file_directory = os.path.dirname(fp)
    self.file_basename = os.path.splitext(os.path.basename(fp))[0]

  def ExtractHeaderInfo(self, open_file):
    try:
      self.ch_states = deal_to_int(open_file, 4)
      self.ch_vdiv = deal_to_data_unit(open_file, 4)
      self.ch_ofst = deal_to_data_unit(open_file, 4)
      self.digit_state = deal_to_int(open_file, 17)
      self.hori_list = deal_to_data_unit(open_file, 2)
      self.wave_len = deal_to_int(open_file, 1)[0]
      self.samp_rate = deal_to_data_unit(open_file, 1)[0]
      self.dig_wave_len = deal_to_int(open_file, 1)[0]
      self.dig_samp_rate = deal_to_data_unit(open_file, 1)[0]
    except IOError:
      print("Error: Can't find the bin file or read failed!")


  def __str__(self):
    result = []
    result.append("ch_states: {}".format(self.ch_states))
    result.append("ch_vdiv: {}".format(self.ch_vdiv))
    result.append("ch_ofst: {}".format(self.ch_ofst))
    result.append("digit_state: {}".format(self.digit_state))
    result.append("hori_list: {}".format(self.hori_list))
    result.append("wave_len: {}".format(self.wave_len))
    result.append("samp_rate: {}".format(self.samp_rate))
    result.append("dig_wave_len: {}".format(self.dig_wave_len)) 
    result.append("dig_samp_rate: {}".format(self.dig_samp_rate))
    result.append("Num active channels: {}".format(self.num_channels))
    return '\n'.join(result)

  @property
  def num_channels(self):
    ch_sum = 0
    for ch in self.ch_states:
      ch_sum += 1 if ch else 0
    return ch_sum

  def GetChannelData(self, ch_num, step = 1):
    return self.GetChannelDataMulti((ch_num,), step)

  def GetLogicData(self, ch_num, threshold = None):
    return self.GetChannelDataMulti((ch_num), threshold)
    
  def GetChannelDataMulti(self, ch_nums, step = 1):
    ch_indicies = []
    for ch_num in ch_nums:
      ch_index = 0
      found = False
      for ch_i, ch_enabled in enumerate(self.ch_states):
        if ch_i == ch_num and ch_enabled:
          found = True
          break
        if ch_enabled:
          ch_index += 1
      
      if not found:
        raise ValueError("Channel {} not found in the binary data".format(ch_num))

      ch_indicies.append(ch_index)

    with open(self.fp, 'rb') as f:
      for sample_i in range(0, self.wave_len, step):
        time_data = float( -self.hori_list[0]*HORI_DIV_NUM/2 + (sample_i/self.samp_rate))
        voltages = []
        for i in range(len(ch_nums)):
          ch_index = ch_indicies[i]
          ch_num = ch_nums[i]
          f.seek(DATA_START + (ch_index * self.wave_len) + sample_i)
          data_byte = f.read(1)[0]
          adc_reading = (data_byte - 128) * self.ch_vdiv[ch_num] / VERT_DIV_CODE
          voltages.append(adc_reading - self.ch_ofst[ch_num])
        yield (time_data, voltages)


  def GetLogicDataMulti(self, ch_nums, thresholds = None):
    if thresholds is None:
      thresholds = [self.EstimateLogicThreshold(ch) for ch in ch_nums]
      print('Using automatic thresholds of {}.'.format(thresholds))

    for time, voltages in self.GetChannelDataMulti(ch_nums):
      yield (time, [voltages[i] > thresholds[i] for i in range(len(voltages))])

  def EstimateLogicThreshold(self, ch_num):
    maximum = -300  # Volts
    minimum = 300   # Volts
    downsample = 100
    for _, [voltage] in self.GetChannelData(ch_num, downsample):
      if voltage > maximum:
        maximum = voltage
      if voltage < minimum:
        minimum = voltage
    threshold = (maximum + minimum) / 2
    return threshold

  def SaveVCD(self, ch_nums, thresholds=None, fp = None):
    vcd_writer = vcd.VcdWriter(
      self.GetLogicDataMulti(ch_nums, thresholds),
      version = '1',
      comment = 'Generated by siglent-bin-parse.py',
      timescale = '1 ns',
      scope = 'SDS1104X-E'
    )
    if fp is None:
      fp = os.path.join(
        self.file_directory,
        self.file_basename + '.vcd'
      )
    vcd_writer.Save(fp)

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Convert Siglent SDS1104X-E binary output to various other formats')
  parser.add_argument('filepath', metavar='p', type=str,
                      help='Filepath of the `.bin` file to convert')
  args = parser.parse_args()

  osc_parser = SiglentParser(args.filepath)
  print(osc_parser)
  osc_parser.SaveVCD((0,2))
